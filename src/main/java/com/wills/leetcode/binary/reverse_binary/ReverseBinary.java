package com.wills.leetcode.binary.reverse_binary;

/**
 * @author 王帅
 * @date 2021-03-16 10:11:21
 * @description:
 * 颠倒二进制位
 */
public class ReverseBinary {

    /**
     * 颠倒给定的 32 位无符号整数的二进制位。
     *
     * 示例 1：
     * 输入: 00000010100101000001111010011100
     * 输出: 00111001011110000010100101000000
     * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
     *      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
     *
     * 示例 2：
     * 输入：11111111111111111111111111111101
     * 输出：10111111111111111111111111111111
     * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
     *      因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
     */
    public static void main(String[] args) {
        System.out.println(reverseBits(43261596));
    }


    /**
     * 因为传入的是一个整数，所以每一位倒过来，然后输出其二进制即可
     */
    public static int reverseBits(int n) {
        int res = 0;
        for (int i = 0; i < 32; i++) {
            // 将 res向左移一位 res = 1 -> 10 便于后面的n最后一位与1做与运算叠加
            res <<= 1;
            // 叠加 最后一位与1的与运算，如果是0就是0
            res += 1 & n;
            // 传入的值向右移一位
            n >>= 1;
        }

        return res;
    }
}
